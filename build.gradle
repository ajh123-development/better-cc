plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.10.0-SNAPSHOT" apply false
}

def javaVersion = JavaLanguageVersion.of(17)

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:1.17.1+build.32:v2"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = javaVersion.asInt()
    }

    java {
        withSourcesJar()
    }
}

import org.apache.tools.ant.taskdefs.condition.Os

List<String> mkCommand(String command) {
    return Os.isFamily(Os.FAMILY_WINDOWS) ? ["cmd", "/c", command] : ["sh", "-c", command]
}

task rollup(type: Exec) {
    group = "build"
    description = "Bundles JS into rollup"

    inputs.files(fileTree("docs/web")).withPropertyName("sources")
    inputs.file("package-lock.json").withPropertyName("package-lock.json")
    inputs.file("tsconfig.json").withPropertyName("Typescript config")
    inputs.file("rollup.config.js").withPropertyName("Rollup config")
    outputs.file("${rootProject.projectDir}/${rootProject.docs_dir}/rollup/index.js").withPropertyName("output")

    commandLine mkCommand('"node_modules/.bin/rollup" --config rollup.config.js')
}

task illuaminateDocs(type: Exec, dependsOn: [rollup]) {
    group = "build"
    description = "Bundles JS into rollup"

    inputs.files(fileTree("docs/other")).withPropertyName("docs")
    inputs.file("illuaminate.sexp").withPropertyName("illuaminate.sexp")
    inputs.dir("${rootProject.projectDir}/${rootProject.docs_dir}/luaFabricJavadoc")
    inputs.dir("${rootProject.projectDir}/${rootProject.docs_dir}/luaForgeJavadoc")
    inputs.file("${rootProject.projectDir}/${rootProject.docs_dir}/rollup/index.js").withPropertyName("scripts")
    inputs.file("docs/web/styles.css").withPropertyName("styles")
    outputs.dir("${rootProject.projectDir}/${rootProject.docs_dir}/docs/lua")

    commandLine mkCommand('"bin/illuaminate" doc-gen')
}

task docWebsite(type: Copy, dependsOn: [illuaminateDocs]) {
    from('docs/other') {
        include 'logo.png'
    }
    from("${rootProject.projectDir}/${rootProject.docs_dir}/rollup") {
        exclude 'index.js'
    }
    into "${rootProject.projectDir}/${rootProject.docs_dir}/docs/lua"
}